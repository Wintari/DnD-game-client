# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\iVlad\Documents\DND_Client\CharacterSheet.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import character
import utilities


class CharacterSheetForm(object):
    character = None
    loaded = False

    def __init__(self):
        super().__init__()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(771, 1043)
        self.tabWidget = QtWidgets.QTabWidget(Form)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 871, 1171))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(0, 0, 771, 1021))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("./data/images/CharacterSheet1.jpg"))
        self.label.setObjectName("label")
        self.STR_VALUE = QtWidgets.QSpinBox(self.tab)
        self.STR_VALUE.setGeometry(QtCore.QRect(70, 237, 30, 15))
        self.STR_VALUE.setRange(1, 20)
        self.STR_VALUE.setFrame(False)
        self.STR_VALUE.setObjectName("STR_VALUE")
        self.STR_MOD = QtWidgets.QLineEdit(self.tab)
        self.STR_MOD.setGeometry(QtCore.QRect(53, 260, 51, 31))
        self.STR_MOD.setFrame(False)
        self.STR_MOD.setAlignment(QtCore.Qt.AlignCenter)
        self.STR_MOD.setReadOnly(True)
        self.STR_MOD.setObjectName("STR_MOD")
        self.DEX_VALUE = QtWidgets.QSpinBox(self.tab)
        self.DEX_VALUE.setGeometry(QtCore.QRect(70, 325, 30, 15))
        self.DEX_VALUE.setRange(1, 20)
        self.DEX_VALUE.setFrame(False)
        self.DEX_VALUE.setObjectName("DEX_VALUE")
        self.DEX_MOD = QtWidgets.QLineEdit(self.tab)
        self.DEX_MOD.setGeometry(QtCore.QRect(53, 349, 51, 31))
        self.DEX_MOD.setFrame(False)
        self.DEX_MOD.setAlignment(QtCore.Qt.AlignCenter)
        self.DEX_MOD.setReadOnly(True)
        self.DEX_MOD.setObjectName("DEX_MOD")
        self.CON_MOD = QtWidgets.QLineEdit(self.tab)
        self.CON_MOD.setGeometry(QtCore.QRect(53, 436, 51, 31))
        self.CON_MOD.setFrame(False)
        self.CON_MOD.setAlignment(QtCore.Qt.AlignCenter)
        self.CON_MOD.setDragEnabled(False)
        self.CON_MOD.setReadOnly(True)
        self.CON_MOD.setObjectName("CON_MOD")
        self.CON_VALUE = QtWidgets.QSpinBox(self.tab)
        self.CON_VALUE.setGeometry(QtCore.QRect(70, 413, 30, 15))
        self.CON_VALUE.setRange(1, 20)
        self.CON_VALUE.setFrame(False)
        self.CON_VALUE.setObjectName("CON_VALUE")
        self.INT_VALUE = QtWidgets.QSpinBox(self.tab)
        self.INT_VALUE.setGeometry(QtCore.QRect(70, 501, 30, 15))
        self.INT_VALUE.setRange(1, 20)
        self.INT_VALUE.setFrame(False)
        self.INT_VALUE.setObjectName("INT_VALUE")
        self.INT_MOD = QtWidgets.QLineEdit(self.tab)
        self.INT_MOD.setGeometry(QtCore.QRect(53, 524, 51, 31))
        self.INT_MOD.setFrame(False)
        self.INT_MOD.setAlignment(QtCore.Qt.AlignCenter)
        self.INT_MOD.setReadOnly(True)
        self.INT_MOD.setObjectName("INT_MOD")
        self.WIS_VALUE = QtWidgets.QSpinBox(self.tab)
        self.WIS_VALUE.setGeometry(QtCore.QRect(70, 589, 30, 15))
        self.WIS_VALUE.setRange(1, 20)
        self.WIS_VALUE.setFrame(False)
        self.WIS_VALUE.setObjectName("WIS_VALUE")
        self.WIS_MOD = QtWidgets.QLineEdit(self.tab)
        self.WIS_MOD.setGeometry(QtCore.QRect(53, 612, 51, 31))
        self.WIS_MOD.setFrame(False)
        self.WIS_MOD.setAlignment(QtCore.Qt.AlignCenter)
        self.WIS_MOD.setReadOnly(True)
        self.WIS_MOD.setObjectName("WIS_MOD")
        self.CHA_VALUE = QtWidgets.QSpinBox(self.tab)
        self.CHA_VALUE.setGeometry(QtCore.QRect(70, 677, 30, 15))
        self.CHA_VALUE.setRange(1, 20)
        self.CHA_VALUE.setFrame(False)
        self.CHA_VALUE.setObjectName("CHA_VALUE")
        self.CHA_MOD = QtWidgets.QLineEdit(self.tab)
        self.CHA_MOD.setGeometry(QtCore.QRect(53, 701, 51, 31))
        self.CHA_MOD.setFrame(False)
        self.CHA_MOD.setAlignment(QtCore.Qt.AlignCenter)
        self.CHA_MOD.setReadOnly(True)
        self.CHA_MOD.setObjectName("CHA_MOD")
        self.listView = QtWidgets.QListView(self.tab)
        self.listView.setGeometry(QtCore.QRect(230, 820, 491, 131))
        self.listView.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.listView.setLineWidth(0)
        self.listView.setObjectName("listView")
        self.EDIT_EQUIPMENT = QtWidgets.QPushButton(self.tab)
        self.EDIT_EQUIPMENT.setGeometry(QtCore.QRect(430, 950, 91, 23))
        self.EDIT_EQUIPMENT.setObjectName("EDIT_EQUIPMENT")
        self.PRO_BONUS = QtWidgets.QLineEdit(self.tab)
        self.PRO_BONUS.setGeometry(QtCore.QRect(63, 160, 31, 20))
        self.PRO_BONUS.setMaxLength(5)
        self.PRO_BONUS.setFrame(False)
        self.PRO_BONUS.setAlignment(QtCore.Qt.AlignCenter)
        self.PRO_BONUS.setReadOnly(True)
        self.PRO_BONUS.setObjectName("PRO_BONUS")
        self.INSP = QtWidgets.QLineEdit(self.tab)
        self.INSP.setGeometry(QtCore.QRect(63, 196, 31, 20))
        self.INSP.setFrame(False)
        self.INSP.setObjectName("INSP")
        self.INSP.setValidator(QtGui.QIntValidator(self.tab))
        self.STR_ST_CHECK = QtWidgets.QCheckBox(self.tab)
        self.STR_ST_CHECK.setGeometry(QtCore.QRect(126, 235, 14, 14))
        self.STR_ST_CHECK.setText("")
        self.STR_ST_CHECK.setObjectName("STR_ST_CHECK")
        self.ATHLETICS_CHECK = QtWidgets.QCheckBox(self.tab)
        self.ATHLETICS_CHECK.setGeometry(QtCore.QRect(126, 249, 14, 14))
        self.ATHLETICS_CHECK.setText("")
        self.ATHLETICS_CHECK.setObjectName("ATHLETICS_CHECK")
        self.DEX_ST_CHECK = QtWidgets.QCheckBox(self.tab)
        self.DEX_ST_CHECK.setGeometry(QtCore.QRect(126, 323, 14, 14))
        self.DEX_ST_CHECK.setText("")
        self.DEX_ST_CHECK.setObjectName("DEX_ST_CHECK")
        self.ACROBATICS_CHECK = QtWidgets.QCheckBox(self.tab)
        self.ACROBATICS_CHECK.setGeometry(QtCore.QRect(126, 336, 14, 14))
        self.ACROBATICS_CHECK.setText("")
        self.ACROBATICS_CHECK.setObjectName("ACROBATICS_CHECK")
        self.SLEIGHT_OF_HAND_CHECK = QtWidgets.QCheckBox(self.tab)
        self.SLEIGHT_OF_HAND_CHECK.setGeometry(QtCore.QRect(126, 349, 14, 14))
        self.SLEIGHT_OF_HAND_CHECK.setText("")
        self.SLEIGHT_OF_HAND_CHECK.setObjectName("SLEIGHT_OF_HAND_CHECK")
        self.STEALTH_CHECK = QtWidgets.QCheckBox(self.tab)
        self.STEALTH_CHECK.setGeometry(QtCore.QRect(126, 362, 14, 14))
        self.STEALTH_CHECK.setText("")
        self.STEALTH_CHECK.setObjectName("STEALTH_CHECK")
        self.CON_ST_CHECK = QtWidgets.QCheckBox(self.tab)
        self.CON_ST_CHECK.setGeometry(QtCore.QRect(126, 411, 14, 14))
        self.CON_ST_CHECK.setText("")
        self.CON_ST_CHECK.setObjectName("CON_ST_CHECK")
        self.INT_ST_CHECK = QtWidgets.QCheckBox(self.tab)
        self.INT_ST_CHECK.setGeometry(QtCore.QRect(126, 501, 14, 14))
        self.INT_ST_CHECK.setText("")
        self.INT_ST_CHECK.setObjectName("INT_ST__CHECK")
        self.ARCANA_CHECK = QtWidgets.QCheckBox(self.tab)
        self.ARCANA_CHECK.setGeometry(QtCore.QRect(126, 513, 14, 14))
        self.ARCANA_CHECK.setText("")
        self.ARCANA_CHECK.setObjectName("ARCANA_CHECK")
        self.HISTORY_CHECK = QtWidgets.QCheckBox(self.tab)
        self.HISTORY_CHECK.setGeometry(QtCore.QRect(126, 525, 14, 14))
        self.HISTORY_CHECK.setText("")
        self.HISTORY_CHECK.setObjectName("HISTORY_CHECK")
        self.INVESTIGATION_CHECK = QtWidgets.QCheckBox(self.tab)
        self.INVESTIGATION_CHECK.setGeometry(QtCore.QRect(126, 536, 15, 15))
        self.INVESTIGATION_CHECK.setText("")
        self.INVESTIGATION_CHECK.setObjectName("INVESTIGATION_CHECK")
        self.NATURE_CHECK = QtWidgets.QCheckBox(self.tab)
        self.NATURE_CHECK.setGeometry(QtCore.QRect(126, 548, 15, 15))
        self.NATURE_CHECK.setText("")
        self.NATURE_CHECK.setObjectName("NATURE_CHECK")
        self.RELIGION_CHECK = QtWidgets.QCheckBox(self.tab)
        self.RELIGION_CHECK.setGeometry(QtCore.QRect(126, 560, 15, 15))
        self.RELIGION_CHECK.setText("")
        self.RELIGION_CHECK.setObjectName("RELIGION_CHECK")
        self.WIS_ST_CHECK = QtWidgets.QCheckBox(self.tab)
        self.WIS_ST_CHECK.setGeometry(QtCore.QRect(126, 588, 15, 15))
        self.WIS_ST_CHECK.setText("")
        self.WIS_ST_CHECK.setObjectName("WIS_ST_CHECK")
        self.ANIMAL_HANDLING_CHECK = QtWidgets.QCheckBox(self.tab)
        self.ANIMAL_HANDLING_CHECK.setGeometry(QtCore.QRect(126, 600, 15, 15))
        self.ANIMAL_HANDLING_CHECK.setText("")
        self.ANIMAL_HANDLING_CHECK.setObjectName("ANIMAL_HANDLING_CHECK")
        self.INSIGHT_CHECK = QtWidgets.QCheckBox(self.tab)
        self.INSIGHT_CHECK.setGeometry(QtCore.QRect(126, 612, 15, 15))
        self.INSIGHT_CHECK.setText("")
        self.INSIGHT_CHECK.setObjectName("INSIGHT_CHECK")
        self.MEDICINE_CHECK = QtWidgets.QCheckBox(self.tab)
        self.MEDICINE_CHECK.setGeometry(QtCore.QRect(126, 624, 15, 15))
        self.MEDICINE_CHECK.setText("")
        self.MEDICINE_CHECK.setObjectName("MEDICINE_CHECK")
        self.PERCEPTION_CHECK = QtWidgets.QCheckBox(self.tab)
        self.PERCEPTION_CHECK.setGeometry(QtCore.QRect(126, 636, 15, 15))
        self.PERCEPTION_CHECK.setText("")
        self.PERCEPTION_CHECK.setObjectName("PERCEPTION_CHECK")
        self.SURVIVAL_CHECK = QtWidgets.QCheckBox(self.tab)
        self.SURVIVAL_CHECK.setGeometry(QtCore.QRect(126, 648, 15, 15))
        self.SURVIVAL_CHECK.setText("")
        self.SURVIVAL_CHECK.setObjectName("SURVIVAL_CHECK")
        self.CHA_ST_CHECK = QtWidgets.QCheckBox(self.tab)
        self.CHA_ST_CHECK.setGeometry(QtCore.QRect(126, 676, 15, 15))
        self.CHA_ST_CHECK.setText("")
        self.CHA_ST_CHECK.setObjectName("CHA_ST_CHECK")
        self.DECEPTION_CHECK = QtWidgets.QCheckBox(self.tab)
        self.DECEPTION_CHECK.setGeometry(QtCore.QRect(126, 688, 15, 15))
        self.DECEPTION_CHECK.setText("")
        self.DECEPTION_CHECK.setObjectName("DECEPTION_CHECK")
        self.INTIMIDATION_CHECK = QtWidgets.QCheckBox(self.tab)
        self.INTIMIDATION_CHECK.setGeometry(QtCore.QRect(126, 700, 15, 15))
        self.INTIMIDATION_CHECK.setText("")
        self.INTIMIDATION_CHECK.setObjectName("INTIMIDATION_CHECK")
        self.PERFORMANCE_CHECK = QtWidgets.QCheckBox(self.tab)
        self.PERFORMANCE_CHECK.setGeometry(QtCore.QRect(126, 712, 15, 15))
        self.PERFORMANCE_CHECK.setText("")
        self.PERFORMANCE_CHECK.setObjectName("PERFORMANCE_CHECK")
        self.PERSUASION_CHECK = QtWidgets.QCheckBox(self.tab)
        self.PERSUASION_CHECK.setGeometry(QtCore.QRect(126, 724, 15, 15))
        self.PERSUASION_CHECK.setText("")
        self.PERSUASION_CHECK.setObjectName("PERSUASION_CHECK")
        self.STR_ST_MOD = QtWidgets.QLineEdit(self.tab)
        self.STR_ST_MOD.setGeometry(QtCore.QRect(140, 235, 17, 14))
        self.STR_ST_MOD.setMaxLength(2)
        self.STR_ST_MOD.setFrame(False)
        self.STR_ST_MOD.setReadOnly(False)
        self.STR_ST_MOD.setObjectName("STR_ST_MOD")
        self.ATHLETICS_MOD = QtWidgets.QLineEdit(self.tab)
        self.ATHLETICS_MOD.setGeometry(QtCore.QRect(140, 249, 17, 14))
        self.ATHLETICS_MOD.setMaxLength(2)
        self.ATHLETICS_MOD.setFrame(False)
        self.ATHLETICS_MOD.setReadOnly(False)
        self.ATHLETICS_MOD.setObjectName("ATHLETICS_MOD")
        self.DEX_ST_MOD = QtWidgets.QLineEdit(self.tab)
        self.DEX_ST_MOD.setGeometry(QtCore.QRect(140, 323, 17, 14))
        self.DEX_ST_MOD.setMaxLength(2)
        self.DEX_ST_MOD.setFrame(False)
        self.DEX_ST_MOD.setReadOnly(True)
        self.DEX_ST_MOD.setObjectName("DEX_ST_MOD")
        self.ACROBATICS_MOD = QtWidgets.QLineEdit(self.tab)
        self.ACROBATICS_MOD.setGeometry(QtCore.QRect(140, 336, 17, 14))
        self.ACROBATICS_MOD.setMaxLength(2)
        self.ACROBATICS_MOD.setFrame(False)
        self.ACROBATICS_MOD.setReadOnly(True)
        self.ACROBATICS_MOD.setObjectName("ACROBATICS_MOD")
        self.SLEIGHT_OF_HAND_MOD = QtWidgets.QLineEdit(self.tab)
        self.SLEIGHT_OF_HAND_MOD.setGeometry(QtCore.QRect(140, 349, 17, 14))
        self.SLEIGHT_OF_HAND_MOD.setMaxLength(2)
        self.SLEIGHT_OF_HAND_MOD.setFrame(False)
        self.SLEIGHT_OF_HAND_MOD.setReadOnly(True)
        self.SLEIGHT_OF_HAND_MOD.setObjectName("SLEIGHT_OF_HAND_MOD")
        self.STEALTH_MOD = QtWidgets.QLineEdit(self.tab)
        self.STEALTH_MOD.setGeometry(QtCore.QRect(140, 362, 17, 14))
        self.STEALTH_MOD.setMaxLength(2)
        self.STEALTH_MOD.setFrame(False)
        self.STEALTH_MOD.setReadOnly(True)
        self.STEALTH_MOD.setObjectName("STEALTH_MOD")
        self.CON_ST_MOD = QtWidgets.QLineEdit(self.tab)
        self.CON_ST_MOD.setGeometry(QtCore.QRect(140, 411, 17, 14))
        self.CON_ST_MOD.setMaxLength(2)
        self.CON_ST_MOD.setFrame(False)
        self.CON_ST_MOD.setReadOnly(True)
        self.CON_ST_MOD.setObjectName("CON_ST_MOD")
        self.INT_ST_MOD = QtWidgets.QLineEdit(self.tab)
        self.INT_ST_MOD.setGeometry(QtCore.QRect(140, 501, 17, 14))
        self.INT_ST_MOD.setMaxLength(2)
        self.INT_ST_MOD.setFrame(False)
        self.INT_ST_MOD.setReadOnly(True)
        self.INT_ST_MOD.setObjectName("INT_ST_MOD")
        self.ARCANA_MOD = QtWidgets.QLineEdit(self.tab)
        self.ARCANA_MOD.setGeometry(QtCore.QRect(140, 513, 17, 14))
        self.ARCANA_MOD.setMaxLength(2)
        self.ARCANA_MOD.setFrame(False)
        self.ARCANA_MOD.setReadOnly(True)
        self.ARCANA_MOD.setObjectName("ARCANA_MOD")
        self.HISTORY_MOD = QtWidgets.QLineEdit(self.tab)
        self.HISTORY_MOD.setGeometry(QtCore.QRect(140, 525, 17, 14))
        self.HISTORY_MOD.setMaxLength(2)
        self.HISTORY_MOD.setFrame(False)
        self.HISTORY_MOD.setReadOnly(True)
        self.HISTORY_MOD.setObjectName("HISTORY_MOD")
        self.INVESTIGATION_MOD = QtWidgets.QLineEdit(self.tab)
        self.INVESTIGATION_MOD.setGeometry(QtCore.QRect(140, 536, 17, 14))
        self.INVESTIGATION_MOD.setMaxLength(2)
        self.INVESTIGATION_MOD.setFrame(False)
        self.INVESTIGATION_MOD.setReadOnly(True)
        self.INVESTIGATION_MOD.setObjectName("INVESTIGATION_MOD")
        self.NATURE_MOD = QtWidgets.QLineEdit(self.tab)
        self.NATURE_MOD.setGeometry(QtCore.QRect(140, 548, 17, 14))
        self.NATURE_MOD.setMaxLength(2)
        self.NATURE_MOD.setFrame(False)
        self.NATURE_MOD.setReadOnly(True)
        self.NATURE_MOD.setObjectName("NATURE_MOD")
        self.RELIGION_MOD = QtWidgets.QLineEdit(self.tab)
        self.RELIGION_MOD.setGeometry(QtCore.QRect(140, 560, 17, 14))
        self.RELIGION_MOD.setMaxLength(2)
        self.RELIGION_MOD.setFrame(False)
        self.RELIGION_MOD.setReadOnly(True)
        self.RELIGION_MOD.setObjectName("RELIGION_MOD")
        self.WIS_ST_MOD = QtWidgets.QLineEdit(self.tab)
        self.WIS_ST_MOD.setGeometry(QtCore.QRect(140, 588, 17, 14))
        self.WIS_ST_MOD.setMaxLength(2)
        self.WIS_ST_MOD.setFrame(False)
        self.WIS_ST_MOD.setReadOnly(True)
        self.WIS_ST_MOD.setObjectName("WIS_ST_MOD")
        self.ANIMAL_HANDLING_MOD = QtWidgets.QLineEdit(self.tab)
        self.ANIMAL_HANDLING_MOD.setGeometry(QtCore.QRect(140, 600, 17, 14))
        self.ANIMAL_HANDLING_MOD.setMaxLength(2)
        self.ANIMAL_HANDLING_MOD.setFrame(False)
        self.ANIMAL_HANDLING_MOD.setReadOnly(True)
        self.ANIMAL_HANDLING_MOD.setObjectName("ANIMAL_HANDLING_MOD")
        self.INSIGHT_MOD = QtWidgets.QLineEdit(self.tab)
        self.INSIGHT_MOD.setGeometry(QtCore.QRect(140, 612, 17, 14))
        self.INSIGHT_MOD.setMaxLength(2)
        self.INSIGHT_MOD.setFrame(False)
        self.INSIGHT_MOD.setReadOnly(True)
        self.INSIGHT_MOD.setObjectName("INSIGHT_MOD")
        self.MEDICINE_MOD = QtWidgets.QLineEdit(self.tab)
        self.MEDICINE_MOD.setGeometry(QtCore.QRect(140, 624, 17, 14))
        self.MEDICINE_MOD.setMaxLength(2)
        self.MEDICINE_MOD.setFrame(False)
        self.MEDICINE_MOD.setReadOnly(True)
        self.MEDICINE_MOD.setObjectName("MEDICINE_MOD")
        self.PERCEPTION_MOD = QtWidgets.QLineEdit(self.tab)
        self.PERCEPTION_MOD.setGeometry(QtCore.QRect(140, 636, 17, 14))
        self.PERCEPTION_MOD.setMaxLength(2)
        self.PERCEPTION_MOD.setFrame(False)
        self.PERCEPTION_MOD.setReadOnly(True)
        self.PERCEPTION_MOD.setObjectName("PERCEPTION_MOD")
        self.SURVIVAL_MOD = QtWidgets.QLineEdit(self.tab)
        self.SURVIVAL_MOD.setGeometry(QtCore.QRect(140, 648, 17, 14))
        self.SURVIVAL_MOD.setMaxLength(2)
        self.SURVIVAL_MOD.setFrame(False)
        self.SURVIVAL_MOD.setReadOnly(True)
        self.SURVIVAL_MOD.setObjectName("SURVIVAL_MOD")
        self.CHA_ST_MOD = QtWidgets.QLineEdit(self.tab)
        self.CHA_ST_MOD.setGeometry(QtCore.QRect(140, 676, 17, 14))
        self.CHA_ST_MOD.setMaxLength(2)
        self.CHA_ST_MOD.setFrame(False)
        self.CHA_ST_MOD.setReadOnly(True)
        self.CHA_ST_MOD.setObjectName("CHA_ST_MOD")
        self.DECEPTION_MOD = QtWidgets.QLineEdit(self.tab)
        self.DECEPTION_MOD.setGeometry(QtCore.QRect(140, 688, 17, 14))
        self.DECEPTION_MOD.setMaxLength(2)
        self.DECEPTION_MOD.setFrame(False)
        self.DECEPTION_MOD.setReadOnly(True)
        self.DECEPTION_MOD.setObjectName("DECEPTION_MOD")
        self.INTIMIDATION_MOD = QtWidgets.QLineEdit(self.tab)
        self.INTIMIDATION_MOD.setGeometry(QtCore.QRect(140, 700, 17, 14))
        self.INTIMIDATION_MOD.setMaxLength(2)
        self.INTIMIDATION_MOD.setFrame(False)
        self.INTIMIDATION_MOD.setReadOnly(True)
        self.INTIMIDATION_MOD.setObjectName("INTIMIDATION_MOD")
        self.PERFORMANCE_MOD = QtWidgets.QLineEdit(self.tab)
        self.PERFORMANCE_MOD.setGeometry(QtCore.QRect(140, 712, 17, 14))
        self.PERFORMANCE_MOD.setMaxLength(2)
        self.PERFORMANCE_MOD.setFrame(False)
        self.PERFORMANCE_MOD.setReadOnly(True)
        self.PERFORMANCE_MOD.setObjectName("PERFORMANCE_MOD")
        self.PERSUASION_MOD = QtWidgets.QLineEdit(self.tab)
        self.PERSUASION_MOD.setGeometry(QtCore.QRect(140, 724, 17, 14))
        self.PERSUASION_MOD.setMaxLength(2)
        self.PERSUASION_MOD.setFrame(False)
        self.PERSUASION_MOD.setReadOnly(True)
        self.PERSUASION_MOD.setObjectName("PERSUASION_MOD")
        self.PASSIVE_WISDOM = QtWidgets.QLineEdit(self.tab)
        self.PASSIVE_WISDOM.setGeometry(QtCore.QRect(63, 761, 31, 20))
        self.PASSIVE_WISDOM.setMaxLength(2)
        self.PASSIVE_WISDOM.setFrame(False)
        self.PASSIVE_WISDOM.setReadOnly(True)
        self.PASSIVE_WISDOM.setObjectName("PASSIVE_WISDOM")
        self.CLASS = QtWidgets.QLineEdit(self.tab)
        self.CLASS.setGeometry(QtCore.QRect(330, 52, 91, 16))
        self.CLASS.setMaxLength(1002)
        self.CLASS.setFrame(False)
        self.CLASS.setObjectName("CLASS")
        self.LEVEL = QtWidgets.QLineEdit(self.tab)
        self.LEVEL.setGeometry(QtCore.QRect(420, 52, 21, 16))
        self.LEVEL.setMaxLength(2)
        self.LEVEL.setFrame(False)
        self.LEVEL.setObjectName("LEVEL")
        self.LEVEL.setValidator(QtGui.QIntValidator(self.tab))
        self.BACKGROUND = QtWidgets.QLineEdit(self.tab)
        self.BACKGROUND.setGeometry(QtCore.QRect(470, 52, 81, 16))
        self.BACKGROUND.setMaxLength(100)
        self.BACKGROUND.setFrame(False)
        self.BACKGROUND.setObjectName("BACKGROUND")
        self.PLAYER_NAME = QtWidgets.QLineEdit(self.tab)
        self.PLAYER_NAME.setGeometry(QtCore.QRect(600, 52, 101, 16))
        self.PLAYER_NAME.setMaxLength(100)
        self.PLAYER_NAME.setFrame(False)
        self.PLAYER_NAME.setObjectName("PLAYER_NAME")
        self.RACE = QtWidgets.QLineEdit(self.tab)
        self.RACE.setGeometry(QtCore.QRect(340, 86, 82, 16))
        self.RACE.setMaxLength(100)
        self.RACE.setFrame(False)
        self.RACE.setObjectName("RACE")
        self.ALIGMENT = QtWidgets.QLineEdit(self.tab)
        self.ALIGMENT.setGeometry(QtCore.QRect(430, 86, 94, 16))
        self.ALIGMENT.setMaxLength(100)
        self.ALIGMENT.setFrame(False)
        self.ALIGMENT.setObjectName("ALIGMENT")
        self.CURRENT_EXP = QtWidgets.QLineEdit(self.tab)
        self.CURRENT_EXP.setGeometry(QtCore.QRect(535, 86, 80, 16))
        self.CURRENT_EXP.setMaxLength(100)
        self.CURRENT_EXP.setFrame(False)
        self.CURRENT_EXP.setObjectName("CURRENT_EXP")
        self.CURRENT_EXP.setValidator(QtGui.QIntValidator(self.tab))
        self.NEXT_LVL_EXP = QtWidgets.QLineEdit(self.tab)
        self.NEXT_LVL_EXP.setReadOnly(True)
        self.NEXT_LVL_EXP.setGeometry(QtCore.QRect(620, 86, 91, 16))
        self.NEXT_LVL_EXP.setMaxLength(100)
        self.NEXT_LVL_EXP.setFrame(False)
        self.NEXT_LVL_EXP.setObjectName("NEXT_LVL_EXP")
        self.NEXT_LVL_EXP.setValidator(QtGui.QIntValidator(self.tab))
        self.ARMOR_CLASS = QtWidgets.QLineEdit(self.tab)
        self.ARMOR_CLASS.setGeometry(QtCore.QRect(290, 179, 41, 21))
        self.ARMOR_CLASS.setMaxLength(2)
        self.ARMOR_CLASS.setFrame(False)
        self.ARMOR_CLASS.setObjectName("ARMOR_CLASS")
        self.ARMOR_CLASS.setValidator(QtGui.QIntValidator(self.tab))
        self.INITIATIVE = QtWidgets.QLineEdit(self.tab)
        self.INITIATIVE.setGeometry(QtCore.QRect(360, 170, 41, 31))
        self.INITIATIVE.setMaxLength(2)
        self.INITIATIVE.setFrame(False)
        self.INITIATIVE.setObjectName("INITIATIVE")
        self.INITIATIVE.setValidator(QtGui.QIntValidator(self.tab))
        self.SPEED = QtWidgets.QLineEdit(self.tab)
        self.SPEED.setGeometry(QtCore.QRect(430, 170, 51, 31))
        self.SPEED.setMaxLength(2)
        self.SPEED.setFrame(False)
        self.SPEED.setObjectName("SPEED")
        self.SPEED.setValidator(QtGui.QIntValidator(self.tab))
        self.CURRENT_HP = QtWidgets.QLineEdit(self.tab)
        self.CURRENT_HP.setGeometry(QtCore.QRect(300, 260, 171, 31))
        self.CURRENT_HP.setMaxLength(10)
        self.CURRENT_HP.setFrame(False)
        self.CURRENT_HP.setObjectName("CURRENT_HP")
        self.CURRENT_HP.setValidator(QtGui.QIntValidator(self.tab))
        self.TEMPORARY_HP = QtWidgets.QLineEdit(self.tab)
        self.TEMPORARY_HP.setGeometry(QtCore.QRect(300, 330, 171, 31))
        self.TEMPORARY_HP.setMaxLength(100)
        self.TEMPORARY_HP.setFrame(False)
        self.TEMPORARY_HP.setObjectName("TEMPORARY_HP")
        self.TEMPORARY_HP.setValidator(QtGui.QIntValidator(self.tab))
        self.HIT_DICE = QtWidgets.QLineEdit(self.tab)
        self.HIT_DICE.setGeometry(QtCore.QRect(290, 410, 81, 21))
        self.HIT_DICE.setMaxLength(100)
        self.HIT_DICE.setFrame(False)
        self.HIT_DICE.setObjectName("HIT_DICE")
        self.FEATURES_AND_TRAITS = QtWidgets.QTextEdit(self.tab)
        self.FEATURES_AND_TRAITS.setGeometry(QtCore.QRect(520, 480, 201, 291))
        self.FEATURES_AND_TRAITS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.FEATURES_AND_TRAITS.setLineWidth(0)
        self.FEATURES_AND_TRAITS.setObjectName("FEATURES_AND_TRAITS")
        self.PERS_TRAITS = QtWidgets.QTextEdit(self.tab)
        self.PERS_TRAITS.setGeometry(QtCore.QRect(530, 160, 181, 61))
        self.PERS_TRAITS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.PERS_TRAITS.setObjectName("PERS_TRAITS")
        self.IDEALS = QtWidgets.QTextEdit(self.tab)
        self.IDEALS.setGeometry(QtCore.QRect(530, 250, 181, 41))
        self.IDEALS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.IDEALS.setObjectName("IDEALS")
        self.BONDS = QtWidgets.QTextEdit(self.tab)
        self.BONDS.setGeometry(QtCore.QRect(530, 320, 181, 41))
        self.BONDS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.BONDS.setObjectName("BONDS")
        self.FLAWS = QtWidgets.QTextEdit(self.tab)
        self.FLAWS.setGeometry(QtCore.QRect(530, 390, 181, 41))
        self.FLAWS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.FLAWS.setObjectName("FLAWS")
        self.CHARACTER_NAME_AND_TITLES = QtWidgets.QLineEdit(self.tab)
        self.CHARACTER_NAME_AND_TITLES.setGeometry(QtCore.QRect(60, 70, 251, 16))
        self.CHARACTER_NAME_AND_TITLES.setMaxLength(100)
        self.CHARACTER_NAME_AND_TITLES.setFrame(False)
        self.CHARACTER_NAME_AND_TITLES.setAlignment(QtCore.Qt.AlignCenter)
        self.CHARACTER_NAME_AND_TITLES.setObjectName("CHARACTER_NAME_AND_TITLES")
        self.ATTACKS = QtWidgets.QListView(self.tab)
        self.ATTACKS.setGeometry(QtCore.QRect(280, 474, 211, 305))
        self.ATTACKS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.ATTACKS.setLineWidth(0)
        self.ATTACKS.setObjectName("ATTACKS")
        self.LANGUAGES = QtWidgets.QTextEdit(self.tab)
        self.LANGUAGES.setGeometry(QtCore.QRect(50, 820, 141, 151))
        self.LANGUAGES.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.LANGUAGES.setObjectName("LANGUAGES")
        self.MAX_HP = QtWidgets.QLineEdit(self.tab)
        self.MAX_HP.setGeometry(QtCore.QRect(370, 234, 111, 14))
        self.MAX_HP.setMaxLength(100)
        self.MAX_HP.setFrame(False)
        self.MAX_HP.setReadOnly(False)
        self.MAX_HP.setObjectName("MAX_HP")
        self.MAX_HP.setValidator(QtGui.QIntValidator(self.tab))
        self.TOTAL_HIT_DICE = QtWidgets.QLineEdit(self.tab)
        self.TOTAL_HIT_DICE.setGeometry(QtCore.QRect(310, 390, 61, 16))
        self.TOTAL_HIT_DICE.setMaxLength(2)
        self.TOTAL_HIT_DICE.setFrame(False)
        self.TOTAL_HIT_DICE.setReadOnly(False)
        self.TOTAL_HIT_DICE.setObjectName("TOTAL_HIT_DICE")
        self.SUCCESSES_DEATH_SAVE_1 = QtWidgets.QCheckBox(self.tab)
        self.SUCCESSES_DEATH_SAVE_1.setGeometry(QtCore.QRect(433, 392, 15, 15))
        self.SUCCESSES_DEATH_SAVE_1.setText("")
        self.SUCCESSES_DEATH_SAVE_1.setObjectName("SUCCESSES_DEATH_SAVE_1")
        self.SUCCESSES_DEATH_SAVE_2 = QtWidgets.QCheckBox(self.tab)
        self.SUCCESSES_DEATH_SAVE_2.setGeometry(QtCore.QRect(449, 392, 15, 15))
        self.SUCCESSES_DEATH_SAVE_2.setText("")
        self.SUCCESSES_DEATH_SAVE_2.setObjectName("SUCCESSES_DEATH_SAVE_2")
        self.SUCCESSES_DEATH_SAVE_3 = QtWidgets.QCheckBox(self.tab)
        self.SUCCESSES_DEATH_SAVE_3.setGeometry(QtCore.QRect(466, 392, 15, 15))
        self.SUCCESSES_DEATH_SAVE_3.setText("")
        self.SUCCESSES_DEATH_SAVE_3.setObjectName("SUCCESSES_DEATH_SAVE_3")
        self.FAILURES_DEATH_SAVE_1 = QtWidgets.QCheckBox(self.tab)
        self.FAILURES_DEATH_SAVE_1.setGeometry(QtCore.QRect(433, 412, 15, 15))
        self.FAILURES_DEATH_SAVE_1.setText("")
        self.FAILURES_DEATH_SAVE_1.setObjectName("FAILURES_DEATH_SAVE_1")
        self.FAILURES_DEATH_SAVE_2 = QtWidgets.QCheckBox(self.tab)
        self.FAILURES_DEATH_SAVE_2.setGeometry(QtCore.QRect(449, 412, 15, 15))
        self.FAILURES_DEATH_SAVE_2.setText("")
        self.FAILURES_DEATH_SAVE_2.setObjectName("FAILURES_DEATH_SAVE_2")
        self.FAILURES_DEATH_SAVE_3 = QtWidgets.QCheckBox(self.tab)
        self.FAILURES_DEATH_SAVE_3.setGeometry(QtCore.QRect(466, 412, 15, 15))
        self.FAILURES_DEATH_SAVE_3.setText("")
        self.FAILURES_DEATH_SAVE_3.setObjectName("FAILURES_DEATH_SAVE_3")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 771, 1021))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("./data/images/CharacterSheet2.jpg"))
        self.label_2.setObjectName("label_2")
        self.SYMBOL = QtWidgets.QLabel(self.tab_2)
        self.SYMBOL.setGeometry(QtCore.QRect(530, 220, 181, 141))
        self.SYMBOL.setText("")
        self.SYMBOL.setObjectName("Symbol")
        self.SYMBOL_NAME = QtWidgets.QLineEdit(self.tab_2)
        self.SYMBOL_NAME.setGeometry(QtCore.QRect(532, 197, 179, 17))
        self.SYMBOL_NAME.setMaxLength(100)
        self.SYMBOL_NAME.setFrame(False)
        self.SYMBOL_NAME.setCursorPosition(0)
        self.SYMBOL_NAME.setAlignment(QtCore.Qt.AlignCenter)
        self.SYMBOL_NAME.setObjectName("SYMBOL_NAME")
        self.ALLIES = QtWidgets.QTextEdit(self.tab_2)
        self.ALLIES.setGeometry(QtCore.QRect(270, 160, 241, 286))
        self.ALLIES.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.ALLIES.setObjectName("ALLIES")
        self.ADDITIONAL_TRAITS = QtWidgets.QTextEdit(self.tab_2)
        self.ADDITIONAL_TRAITS.setGeometry(QtCore.QRect(271, 491, 465, 271))
        self.ADDITIONAL_TRAITS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.ADDITIONAL_TRAITS.setObjectName("ADDITIONAL_TRAITS")
        self.CHARACTER_NAME_AND_TITLES_2 = QtWidgets.QLineEdit(self.tab_2)
        self.CHARACTER_NAME_AND_TITLES_2.setReadOnly(True)
        self.CHARACTER_NAME_AND_TITLES_2.setGeometry(QtCore.QRect(50, 80, 261, 20))
        self.CHARACTER_NAME_AND_TITLES_2.setFrame(False)
        self.CHARACTER_NAME_AND_TITLES_2.setAlignment(QtCore.Qt.AlignCenter)
        self.CHARACTER_NAME_AND_TITLES_2.setObjectName("CHARACTER_NAME_AND_TITLES_2")
        self.BACKSTORY = QtWidgets.QTextEdit(self.tab_2)
        self.BACKSTORY.setGeometry(QtCore.QRect(24, 504, 221, 491))
        self.BACKSTORY.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.BACKSTORY.setObjectName("BACKSTORY")
        self.TREASURE = QtWidgets.QListView(self.tab_2)
        self.TREASURE.setGeometry(QtCore.QRect(273, 797, 461, 171))
        self.TREASURE.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.TREASURE.setObjectName("TREASURE")
        self.EDIT_TREASURE = QtWidgets.QPushButton(self.tab_2)
        self.EDIT_TREASURE.setGeometry(QtCore.QRect(460, 973, 91, 23))
        self.EDIT_TREASURE.setObjectName("EDIT_TREASURE")
        self.CHARACTER_APPEARANCE = QtWidgets.QLabel(self.tab_2)
        self.CHARACTER_APPEARANCE.setGeometry(QtCore.QRect(30, 170, 211, 251))
        self.CHARACTER_APPEARANCE.setText("")
        self.CHARACTER_APPEARANCE.setObjectName("CHARACTER_APPEARANCE")
        self.EDIT_APPEARANCE = QtWidgets.QPushButton(self.tab_2)
        self.EDIT_APPEARANCE.setGeometry(QtCore.QRect(90, 430, 91, 23))
        self.EDIT_APPEARANCE.setObjectName("EDIT_APPEARANCE")
        self.EDIT_SYMBOL = QtWidgets.QPushButton(self.tab_2)
        self.EDIT_SYMBOL.setGeometry(QtCore.QRect(580, 420, 91, 23))
        self.EDIT_SYMBOL.setObjectName("EDIT_SYMBOL")
        self.AGE = QtWidgets.QLineEdit(self.tab_2)
        self.AGE.setGeometry(QtCore.QRect(330, 60, 113, 18))
        self.AGE.setFrame(False)
        self.AGE.setObjectName("AGE")
        self.AGE.setValidator(QtGui.QIntValidator(self.tab))
        self.HEIGHT = QtWidgets.QLineEdit(self.tab_2)
        self.HEIGHT.setGeometry(QtCore.QRect(450, 60, 113, 18))
        self.HEIGHT.setFrame(False)
        self.HEIGHT.setObjectName("HEIGHT")
        self.HEIGHT.setValidator(QtGui.QIntValidator(self.tab))
        self.WEIGHT = QtWidgets.QLineEdit(self.tab_2)
        self.WEIGHT.setGeometry(QtCore.QRect(590, 60, 113, 18))
        self.WEIGHT.setFrame(False)
        self.WEIGHT.setObjectName("WEIGHT")
        self.WEIGHT.setValidator(QtGui.QIntValidator(self.tab))
        self.EYES = QtWidgets.QLineEdit(self.tab_2)
        self.EYES.setGeometry(QtCore.QRect(330, 93, 113, 18))
        self.EYES.setFrame(False)
        self.EYES.setObjectName("EYES")
        self.SKIN = QtWidgets.QLineEdit(self.tab_2)
        self.SKIN.setGeometry(QtCore.QRect(460, 93, 113, 18))
        self.SKIN.setFrame(False)
        self.SKIN.setObjectName("SKIN")
        self.HAIR = QtWidgets.QLineEdit(self.tab_2)
        self.HAIR.setGeometry(QtCore.QRect(590, 93, 113, 18))
        self.HAIR.setFrame(False)
        self.HAIR.setObjectName("HAIR")
        self.label_2.raise_()
        self.SYMBOL_NAME.raise_()
        self.SYMBOL.raise_()
        self.ALLIES.raise_()
        self.ADDITIONAL_TRAITS.raise_()
        self.CHARACTER_NAME_AND_TITLES_2.raise_()
        self.BACKSTORY.raise_()
        self.TREASURE.raise_()
        self.EDIT_TREASURE.raise_()
        self.CHARACTER_APPEARANCE.raise_()
        self.EDIT_APPEARANCE.raise_()
        self.EDIT_SYMBOL.raise_()
        self.AGE.raise_()
        self.HEIGHT.raise_()
        self.WEIGHT.raise_()
        self.EYES.raise_()
        self.SKIN.raise_()
        self.HAIR.raise_()
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.label_3 = QtWidgets.QLabel(self.tab_3)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 771, 1021))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("./data/images/CharacterSheet3.JPG"))
        self.label_3.setObjectName("label_3")
        self.CONTRIPS = QtWidgets.QListView(self.tab_3)
        self.CONTRIPS.setGeometry(QtCore.QRect(25, 220, 225, 123))
        self.CONTRIPS.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.CONTRIPS.setObjectName("CONTRIPS")
        self.SPELLS_1 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_1.setGeometry(QtCore.QRect(25, 444, 225, 217))
        self.SPELLS_1.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_1.setObjectName("SPELLS_1")
        self.SPELLS_2 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_2.setGeometry(QtCore.QRect(25, 750, 225, 221))
        self.SPELLS_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_2.setObjectName("SPELLS_2")
        self.SPELLS_3 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_3.setGeometry(QtCore.QRect(270, 220, 225, 215))
        self.SPELLS_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_3.setObjectName("SPELLS_3")
        self.SPELLS_4 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_4.setGeometry(QtCore.QRect(270, 520, 225, 215))
        self.SPELLS_4.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_4.setObjectName("SPELLS_4")
        self.SPELLS_5 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_5.setGeometry(QtCore.QRect(270, 823, 225, 148))
        self.SPELLS_5.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_5.setObjectName("SPELLS_5")
        self.SPELLS_6 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_6.setGeometry(QtCore.QRect(512, 220, 231, 141))
        self.SPELLS_6.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_6.setObjectName("SPELLS_6")
        self.SPELLS_7 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_7.setGeometry(QtCore.QRect(513, 450, 231, 137))
        self.SPELLS_7.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_7.setObjectName("SPELLS_7")
        self.SPELLS_8 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_8.setGeometry(QtCore.QRect(513, 675, 231, 101))
        self.SPELLS_8.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_8.setObjectName("SPELLS_8")
        self.SPELLS_9 = QtWidgets.QListView(self.tab_3)
        self.SPELLS_9.setGeometry(QtCore.QRect(513, 861, 231, 109))
        self.SPELLS_9.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.SPELLS_9.setObjectName("SPELLS_9")
        self.ADD_CONTRIPS = QtWidgets.QPushButton(self.tab_3)
        self.ADD_CONTRIPS.setGeometry(QtCore.QRect(103, 345, 75, 23))
        self.ADD_CONTRIPS.setObjectName("ADD_CONTRIPS")
        self.ADD_SPELL_1 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_1.setGeometry(QtCore.QRect(90, 663, 101, 23))
        self.ADD_SPELL_1.setObjectName("ADD_SPELL_1")
        self.ADD_SPELL_2 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_2.setGeometry(QtCore.QRect(90, 973, 101, 23))
        self.ADD_SPELL_2.setObjectName("ADD_SPELL_2")
        self.ADD_SPELL_3 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_3.setGeometry(QtCore.QRect(333, 437, 101, 23))
        self.ADD_SPELL_3.setObjectName("ADD_SPELL_3")
        self.ADD_SPELL_4 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_4.setGeometry(QtCore.QRect(333, 737, 111, 23))
        self.ADD_SPELL_4.setObjectName("ADD_SPELL_4")
        self.ADD_SPELL_5 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_5.setGeometry(QtCore.QRect(333, 973, 111, 23))
        self.ADD_SPELL_5.setObjectName("ADD_SPELL_5")
        self.ADD_SPELL_6 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_6.setGeometry(QtCore.QRect(578, 363, 101, 23))
        self.ADD_SPELL_6.setObjectName("ADD_SPELL_6")
        self.ADD_SPELL_7 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_7.setGeometry(QtCore.QRect(578, 589, 101, 23))
        self.ADD_SPELL_7.setObjectName("ADD_SPELL_7")
        self.ADD_SPELL_8 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_8.setGeometry(QtCore.QRect(578, 778, 111, 23))
        self.ADD_SPELL_8.setObjectName("ADD_SPELL_8")
        self.ADD_SPELL_9 = QtWidgets.QPushButton(self.tab_3)
        self.ADD_SPELL_9.setGeometry(QtCore.QRect(578, 973, 101, 23))
        self.ADD_SPELL_9.setObjectName("ADD_SPELL_9")
        self.SPELLCASTING_CLASS = QtWidgets.QLineEdit(self.tab_3)
        self.SPELLCASTING_CLASS.setReadOnly(True)
        self.SPELLCASTING_CLASS.setGeometry(QtCore.QRect(70, 80, 241, 20))
        self.SPELLCASTING_CLASS.setFrame(False)
        self.SPELLCASTING_CLASS.setObjectName("SPELLCASTING_CLASS")
        self.SPELLCASTING_ABILITY = QtWidgets.QLineEdit(self.tab_3)
        self.SPELLCASTING_ABILITY.setReadOnly(True)
        self.SPELLCASTING_ABILITY.setGeometry(QtCore.QRect(360, 70, 71, 20))
        self.SPELLCASTING_ABILITY.setFrame(False)
        self.SPELLCASTING_ABILITY.setObjectName("SPELLCASTING_ABILITY")
        self.SPELLCASTING_SAVE_DC = QtWidgets.QLineEdit(self.tab_3)
        self.SPELLCASTING_SAVE_DC.setReadOnly(True)
        self.SPELLCASTING_SAVE_DC.setGeometry(QtCore.QRect(491, 70, 71, 20))
        self.SPELLCASTING_SAVE_DC.setFrame(False)
        self.SPELLCASTING_SAVE_DC.setObjectName("SPELLCASTING_SAVE_DC")
        self.SPELL_ATTACK_BONUS = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_ATTACK_BONUS.setReadOnly(True)
        self.SPELL_ATTACK_BONUS.setGeometry(QtCore.QRect(626, 70, 71, 20))
        self.SPELL_ATTACK_BONUS.setFrame(False)
        self.SPELL_ATTACK_BONUS.setObjectName("SPELL_ATTACK_BONUS")
        self.SPELL_SLOT_1_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_1_TOTAL.setGeometry(QtCore.QRect(60, 410, 41, 20))
        self.SPELL_SLOT_1_TOTAL.setFrame(False)
        self.SPELL_SLOT_1_TOTAL.setObjectName("SPELL_SLOT_1_TOTAL")
        self.SPELL_SLOT_2_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_2_TOTAL.setGeometry(QtCore.QRect(53, 714, 51, 20))
        self.SPELL_SLOT_2_TOTAL.setFrame(False)
        self.SPELL_SLOT_2_TOTAL.setObjectName("SPELL_SLOT_2_TOTAL")
        self.SPELL_SLOT_1_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_1_EXPENDED.setGeometry(QtCore.QRect(126, 410, 111, 20))
        self.SPELL_SLOT_1_EXPENDED.setFrame(False)
        self.SPELL_SLOT_1_EXPENDED.setObjectName("SPELL_SLOT_1_EXPENDED")
        self.SPELL_SLOT_2_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_2_EXPENDED.setGeometry(QtCore.QRect(126, 714, 111, 20))
        self.SPELL_SLOT_2_EXPENDED.setFrame(False)
        self.SPELL_SLOT_2_EXPENDED.setObjectName("SPELL_SLOT_2_EXPENDED")
        self.SPELL_SLOT_3_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_3_TOTAL.setGeometry(QtCore.QRect(302, 186, 41, 20))
        self.SPELL_SLOT_3_TOTAL.setFrame(False)
        self.SPELL_SLOT_3_TOTAL.setObjectName("SPELL_SLOT_3_TOTAL")
        self.SPELL_SLOT_4_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_4_TOTAL.setGeometry(QtCore.QRect(302, 486, 41, 20))
        self.SPELL_SLOT_4_TOTAL.setFrame(False)
        self.SPELL_SLOT_4_TOTAL.setObjectName("SPELL_SLOT_4_TOTAL")
        self.SPELL_SLOT_5_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_5_TOTAL.setGeometry(QtCore.QRect(303, 788, 41, 20))
        self.SPELL_SLOT_5_TOTAL.setFrame(False)
        self.SPELL_SLOT_5_TOTAL.setObjectName("SPELL_SLOT_5_TOTAL")
        self.SPELL_SLOT_6_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_6_TOTAL.setGeometry(QtCore.QRect(546, 187, 41, 20))
        self.SPELL_SLOT_6_TOTAL.setFrame(False)
        self.SPELL_SLOT_6_TOTAL.setObjectName("SPELL_SLOT_6_TOTAL")
        self.SPELL_SLOT_7_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_7_TOTAL.setGeometry(QtCore.QRect(546, 413, 41, 20))
        self.SPELL_SLOT_7_TOTAL.setFrame(False)
        self.SPELL_SLOT_7_TOTAL.setObjectName("SPELL_SLOT_7_TOTAL")
        self.SPELLCASTING_ABILITY_11 = QtWidgets.QLineEdit(self.tab_3)
        self.SPELLCASTING_ABILITY_11.setGeometry(QtCore.QRect(620, 410, 101, 20))
        self.SPELLCASTING_ABILITY_11.setFrame(False)
        self.SPELLCASTING_ABILITY_11.setObjectName("SPELLCASTING_ABILITY_11")
        self.SPELL_SLOT_8_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_8_TOTAL.setGeometry(QtCore.QRect(545, 640, 41, 20))
        self.SPELL_SLOT_8_TOTAL.setFrame(False)
        self.SPELL_SLOT_8_TOTAL.setObjectName("SPELL_SLOT_8_TOTAL")
        self.SPELLCASTING_ABILITY_13 = QtWidgets.QLineEdit(self.tab_3)
        self.SPELLCASTING_ABILITY_13.setGeometry(QtCore.QRect(610, 640, 111, 20))
        self.SPELLCASTING_ABILITY_13.setFrame(False)
        self.SPELLCASTING_ABILITY_13.setObjectName("SPELLCASTING_ABILITY_13")
        self.SPELL_SLOT_9_TOTAL = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_9_TOTAL.setGeometry(QtCore.QRect(544, 825, 41, 20))
        self.SPELL_SLOT_9_TOTAL.setFrame(False)
        self.SPELL_SLOT_9_TOTAL.setObjectName("SPELL_SLOT_9_TOTAL")
        self.SPELL_SLOT_3_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_3_EXPENDED.setGeometry(QtCore.QRect(370, 186, 111, 20))
        self.SPELL_SLOT_3_EXPENDED.setFrame(False)
        self.SPELL_SLOT_3_EXPENDED.setObjectName("SPELL_SLOT_3_EXPENDED")
        self.SPELL_SLOT_4_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_4_EXPENDED.setGeometry(QtCore.QRect(370, 486, 111, 20))
        self.SPELL_SLOT_4_EXPENDED.setFrame(False)
        self.SPELL_SLOT_4_EXPENDED.setObjectName("SPELL_SLOT_4_EXPENDED")
        self.SPELL_SLOT_5_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_5_EXPENDED.setGeometry(QtCore.QRect(370, 788, 111, 20))
        self.SPELL_SLOT_5_EXPENDED.setFrame(False)
        self.SPELL_SLOT_5_EXPENDED.setObjectName("SPELL_SLOT_5_EXPENDED")
        self.SPELL_SLOT_6_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_6_EXPENDED.setGeometry(QtCore.QRect(612, 186, 111, 20))
        self.SPELL_SLOT_6_EXPENDED.setFrame(False)
        self.SPELL_SLOT_6_EXPENDED.setObjectName("SPELL_SLOT_6_EXPENDED")
        self.SPELL_SLOT_7_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_7_EXPENDED.setGeometry(QtCore.QRect(610, 413, 111, 20))
        self.SPELL_SLOT_7_EXPENDED.setFrame(False)
        self.SPELL_SLOT_7_EXPENDED.setObjectName("SPELL_SLOT_7_EXPENDED")
        self.SPELL_SLOT_8_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_8_EXPENDED.setGeometry(QtCore.QRect(610, 640, 111, 20))
        self.SPELL_SLOT_8_EXPENDED.setFrame(False)
        self.SPELL_SLOT_8_EXPENDED.setObjectName("SPELL_SLOT_8_EXPENDED")
        self.SPELL_SLOT_9_EXPENDED = QtWidgets.QLineEdit(self.tab_3)
        self.SPELL_SLOT_9_EXPENDED.setGeometry(QtCore.QRect(610, 826, 111, 20))
        self.SPELL_SLOT_9_EXPENDED.setFrame(False)
        self.SPELL_SLOT_9_EXPENDED.setObjectName("SPELL_SLOT_9_EXPENDED")
        self.tabWidget.addTab(self.tab_3, "")

        self.retranslateUi(Form)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.createCharacter()
        self.connectAll()

    def loadCharacter(self, path):
        self.loaded = False
        self.character = character.load(path)
        self.updateValues()
        self.loaded = True
    
    def saveCharacter(self, path):
        character.save(path, self.character)

    def createCharacter(self):
        self.loaded = False
        self.character = character.getDefault()
        self.updateValues()
        self.loaded = True

    def connectAll(self):
        self.STR_VALUE.valueChanged.connect(self.mainAttributesChanged)
        self.DEX_VALUE.valueChanged.connect(self.mainAttributesChanged)
        self.CON_VALUE.valueChanged.connect(self.mainAttributesChanged)
        self.INT_VALUE.valueChanged.connect(self.mainAttributesChanged)
        self.WIS_VALUE.valueChanged.connect(self.mainAttributesChanged)
        self.CHA_VALUE.valueChanged.connect(self.mainAttributesChanged)
        self.LEVEL.textChanged.connect(self.mainAttributesChanged)

        self.STR_ST_CHECK.clicked.connect(self.saveModsUpdated)
        self.DEX_ST_CHECK.clicked.connect(self.saveModsUpdated)
        self.CON_ST_CHECK.clicked.connect(self.saveModsUpdated)
        self.INT_ST_CHECK.clicked.connect(self.saveModsUpdated)
        self.WIS_ST_CHECK.clicked.connect(self.saveModsUpdated)
        self.CHA_ST_CHECK.clicked.connect(self.saveModsUpdated)

        self.ATHLETICS_CHECK.clicked.connect(self.skillsModsUpdated)
        self.ACROBATICS_CHECK.clicked.connect(self.skillsModsUpdated)
        self.SLEIGHT_OF_HAND_CHECK.clicked.connect(self.skillsModsUpdated)
        self.STEALTH_CHECK.clicked.connect(self.skillsModsUpdated)
        self.ARCANA_CHECK.clicked.connect(self.skillsModsUpdated)
        self.HISTORY_CHECK.clicked.connect(self.skillsModsUpdated)
        self.INVESTIGATION_CHECK.clicked.connect(self.skillsModsUpdated)
        self.NATURE_CHECK.clicked.connect(self.skillsModsUpdated)
        self.RELIGION_CHECK.clicked.connect(self.skillsModsUpdated)
        self.ANIMAL_HANDLING_CHECK.clicked.connect(self.skillsModsUpdated)
        self.INSIGHT_CHECK.clicked.connect(self.skillsModsUpdated)
        self.MEDICINE_CHECK.clicked.connect(self.skillsModsUpdated)
        self.PERCEPTION_CHECK.clicked.connect(self.skillsModsUpdated)
        self.SURVIVAL_CHECK.clicked.connect(self.skillsModsUpdated)
        self.DECEPTION_CHECK.clicked.connect(self.skillsModsUpdated)
        self.INTIMIDATION_CHECK.clicked.connect(self.skillsModsUpdated)
        self.PERFORMANCE_CHECK.clicked.connect(self.skillsModsUpdated)
        self.PERSUASION_CHECK.clicked.connect(self.skillsModsUpdated)

        self.PLAYER_NAME.textChanged.connect(self.firstSheetAnyTextChanged)
        self.CHARACTER_NAME_AND_TITLES.textChanged.connect(self.firstSheetAnyTextChanged)
        self.CLASS.textChanged.connect(self.firstSheetAnyTextChanged)
        self.RACE.textChanged.connect(self.firstSheetAnyTextChanged)
        self.ALIGMENT.textChanged.connect(self.firstSheetAnyTextChanged)
        self.BACKGROUND.textChanged.connect(self.firstSheetAnyTextChanged)
        self.CURRENT_EXP.textChanged.connect(self.firstSheetAnyTextChanged)
        self.LANGUAGES.textChanged.connect(self.firstSheetAnyTextChanged)
        self.INSP.textChanged.connect(self.firstSheetAnyTextChanged)
        self.ARMOR_CLASS.textChanged.connect(self.firstSheetAnyTextChanged)
        self.INITIATIVE.textChanged.connect(self.firstSheetAnyTextChanged)
        self.SPEED.textChanged.connect(self.firstSheetAnyTextChanged)
        self.HIT_DICE.textChanged.connect(self.firstSheetAnyTextChanged)
        self.MAX_HP.textChanged.connect(self.firstSheetAnyTextChanged)
        self.CURRENT_HP.textChanged.connect(self.firstSheetAnyTextChanged)
        self.TEMPORARY_HP.textChanged.connect(self.firstSheetAnyTextChanged)
        self.PERS_TRAITS.textChanged.connect(self.firstSheetAnyTextChanged)
        self.IDEALS.textChanged.connect(self.firstSheetAnyTextChanged)
        self.BONDS.textChanged.connect(self.firstSheetAnyTextChanged)
        self.FLAWS.textChanged.connect(self.firstSheetAnyTextChanged)
        self.FEATURES_AND_TRAITS.textChanged.connect(self.firstSheetAnyTextChanged)

        self.FAILURES_DEATH_SAVE_1.clicked.connect(self.deathSavesUpdated)
        self.FAILURES_DEATH_SAVE_2.clicked.connect(self.deathSavesUpdated)
        self.FAILURES_DEATH_SAVE_3.clicked.connect(self.deathSavesUpdated)
        self.SUCCESSES_DEATH_SAVE_1.clicked.connect(self.deathSavesUpdated)
        self.SUCCESSES_DEATH_SAVE_2.clicked.connect(self.deathSavesUpdated)
        self.SUCCESSES_DEATH_SAVE_3.clicked.connect(self.deathSavesUpdated)

        self.AGE.textChanged.connect(self.secondSheetAnyTextChanged)
        self.HEIGHT.textChanged.connect(self.secondSheetAnyTextChanged)
        self.WEIGHT.textChanged.connect(self.secondSheetAnyTextChanged)
        self.EYES.textChanged.connect(self.secondSheetAnyTextChanged)
        self.SKIN.textChanged.connect(self.secondSheetAnyTextChanged)
        self.HAIR.textChanged.connect(self.secondSheetAnyTextChanged)
        self.SYMBOL_NAME.textChanged.connect(self.secondSheetAnyTextChanged)
        self.BACKSTORY.textChanged.connect(self.secondSheetAnyTextChanged)
        self.ALLIES.textChanged.connect(self.secondSheetAnyTextChanged)
        self.ADDITIONAL_TRAITS.textChanged.connect(self.secondSheetAnyTextChanged)

        self.EDIT_APPEARANCE.clicked.connect(self.loadCharImage)
        self.EDIT_SYMBOL.clicked.connect(self.loadCharSymbol)

    def mainAttributesChanged(self):
        if(self.loaded):
            self.character["attributes"]["stats"]["str"] = self.STR_VALUE.value()
            self.character["attributes"]["stats"]["dex"] = self.DEX_VALUE.value()
            self.character["attributes"]["stats"]["con"] = self.CON_VALUE.value()
            self.character["attributes"]["stats"]["int"] = self.INT_VALUE.value()
            self.character["attributes"]["stats"]["wis"] = self.WIS_VALUE.value()
            self.character["attributes"]["stats"]["cha"] = self.CHA_VALUE.value()

            try:
                self.character["attributes"]["lvl"] = int(self.LEVEL.text())
            except:
                self.character["attributes"]["lvl"] = 0

            proBonus = utilities.calculateProficiencyBonus(self.character["attributes"]["lvl"])
            self.PRO_BONUS.setText(str(proBonus))
            self.NEXT_LVL_EXP.setText(str(utilities.calculateMaxExp(self.character["attributes"]["lvl"])))

            self.updateStatsMod()

    def firstSheetAnyTextChanged(self):
        if(self.loaded):
            self.character["attributes"]["player name"] = self.PLAYER_NAME.text()
            self.character["attributes"]["character name"] = self.CHARACTER_NAME_AND_TITLES.text()
            self.character["attributes"]["class"] = self.CLASS.text()
            self.character["attributes"]["race"] = self.RACE.text()
            self.character["attributes"]["alignment"] = self.ALIGMENT.text()
            self.character["attributes"]["background"] =  self.BACKGROUND.text()
            self.character["attributes"]["exp"] = self.CURRENT_EXP.text()

            self.character["attributes"]["proficiencies"] = self.LANGUAGES.toPlainText()
            self.character["attributes"]["inspiration"] = self.INSP.text()

            self.character["attributes"]["ac"] = self.ARMOR_CLASS.text()
            self.character["attributes"]["initiative"] = self.INITIATIVE.text()
            self.character["attributes"]["speed"] = self.SPEED.text()

            self.character["attributes"]["hit dice"] = self.HIT_DICE.text()
            self.character["attributes"]["max hp"] =  self.MAX_HP.text()
            self.character["attributes"]["cur hp"] = self.CURRENT_HP.text()
            self.character["attributes"]["tmp hp"] = self.TEMPORARY_HP.text()

            self.character["attributes"]["personality traits"] = self.PERS_TRAITS.toPlainText()
            self.character["attributes"]["ideals"] = self.IDEALS.toPlainText()
            self.character["attributes"]["bonds"] = self.BONDS.toPlainText()
            self.character["attributes"]["flaws"] = self.FLAWS.toPlainText()
            self.character["attributes"]["features"] = self.FEATURES_AND_TRAITS.toPlainText()

            self.CHARACTER_NAME_AND_TITLES_2.setText(self.character["attributes"]["character name"])
            self.SPELLCASTING_CLASS.setText(self.character["attributes"]["class"])
    
    def secondSheetAnyTextChanged(self):
        if(self.loaded):
            self.character["description"]["age"] = self.AGE.text()
            self.character["description"]["height"] = self.HEIGHT.text()
            self.character["description"]["weight"] = self.WEIGHT.text()
            self.character["description"]["eyes"] = self.EYES.text()
            self.character["description"]["skin"] = self.SKIN.text()
            self.character["description"]["hair"] = self.HAIR.text()
            self.character["description"]["symbol name"] = self.SYMBOL_NAME.text()
            self.character["description"]["backstory"] = self.BACKSTORY.toPlainText()
            self.character["description"]["allies"] = self.ALLIES.toPlainText()
            self.character["description"]["features"] = self.ADDITIONAL_TRAITS.toPlainText()


    def updateValues(self):
        self.updateAttributes()
        self.updateDescription()
        self.updateSpells()

    def updateDescription(self):
        self.CHARACTER_NAME_AND_TITLES_2.setText(self.character["attributes"]["character name"])
        self.AGE.setText(self.character["description"]["age"])
        self.HEIGHT.setText(self.character["description"]["height"])
        self.WEIGHT.setText(self.character["description"]["weight"])
        self.EYES.setText(self.character["description"]["eyes"])
        self.SKIN.setText(self.character["description"]["skin"])
        self.HAIR.setText(self.character["description"]["hair"])
        self.CHARACTER_APPEARANCE.setPixmap(QtGui.QPixmap(self.character["description"]["image"]).scaledToWidth(self.CHARACTER_APPEARANCE.size().width()))
        self.SYMBOL_NAME.setText(self.character["description"]["symbol name"])
        self.SYMBOL.setPixmap(QtGui.QPixmap(self.character["description"]["symbol"]).scaledToWidth(self.SYMBOL.size().width()))
        self.BACKSTORY.setText(self.character["description"]["backstory"])
        self.ALLIES.setText(self.character["description"]["allies"])
        self.ADDITIONAL_TRAITS.setText(self.character["description"]["features"])

    def updateSpells(self):
        self.SPELLCASTING_CLASS.setText(self.character["attributes"]["class"])
        self.SPELLCASTING_ABILITY.setText("WIS")

    def updateAttributes(self):
        self.PLAYER_NAME.setText(self.character["attributes"]["player name"])
        self.CHARACTER_NAME_AND_TITLES.setText(self.character["attributes"]["character name"])
        self.CLASS.setText(self.character["attributes"]["class"])
        self.RACE.setText(self.character["attributes"]["race"])
        self.ALIGMENT.setText(self.character["attributes"]["alignment"])
        self.BACKGROUND.setText(self.character["attributes"]["background"])
        self.LEVEL.setText(str(self.character["attributes"]["lvl"]))
        self.CURRENT_EXP.setText(str(self.character["attributes"]["exp"]))
        self.NEXT_LVL_EXP.setText(str(utilities.calculateMaxExp(self.character["attributes"]["lvl"])))

        self.STR_VALUE.setValue(self.character["attributes"]["stats"]["str"])
        self.DEX_VALUE.setValue(self.character["attributes"]["stats"]["dex"])
        self.CON_VALUE.setValue(self.character["attributes"]["stats"]["con"])
        self.INT_VALUE.setValue(self.character["attributes"]["stats"]["int"])
        self.WIS_VALUE.setValue(self.character["attributes"]["stats"]["wis"])
        self.CHA_VALUE.setValue(self.character["attributes"]["stats"]["cha"])

        self.updateStatsMod()

        proBonus = utilities.calculateProficiencyBonus(self.character["attributes"]["lvl"])
        self.PRO_BONUS.setText(str(proBonus))

        self.LANGUAGES.setText(self.character["attributes"]["proficiencies"])
        self.INSP.setText(self.character["attributes"]["inspiration"])

        self.ARMOR_CLASS.setText(self.character["attributes"]["ac"])
        self.INITIATIVE.setText(self.character["attributes"]["initiative"])
        self.SPEED.setText(self.character["attributes"]["speed"])

        self.HIT_DICE.setText(self.character["attributes"]["hit dice"])
        self.MAX_HP.setText(self.character["attributes"]["max hp"])
        self.CURRENT_HP.setText(self.character["attributes"]["cur hp"])
        self.TEMPORARY_HP.setText(self.character["attributes"]["tmp hp"])

        self.PERS_TRAITS.setText(self.character["attributes"]["personality traits"])
        self.IDEALS.setText(self.character["attributes"]["ideals"])
        self.BONDS.setText(self.character["attributes"]["bonds"])
        self.FLAWS.setText(self.character["attributes"]["flaws"])
        self.FEATURES_AND_TRAITS.setText(self.character["attributes"]["features"])

    def updateStatsMod(self):
        strMod = utilities.calculateModifier(self.character["attributes"]["stats"]["str"])
        dexMod = utilities.calculateModifier(self.character["attributes"]["stats"]["dex"])
        conMod = utilities.calculateModifier(self.character["attributes"]["stats"]["con"])
        intMod = utilities.calculateModifier(self.character["attributes"]["stats"]["int"])
        wisMod = utilities.calculateModifier(self.character["attributes"]["stats"]["wis"])
        chaMod = utilities.calculateModifier(self.character["attributes"]["stats"]["cha"])

        self.STR_MOD.setText(str(strMod))
        self.DEX_MOD.setText(str(dexMod))
        self.CON_MOD.setText(str(conMod))
        self.INT_MOD.setText(str(intMod))
        self.WIS_MOD.setText(str(wisMod))
        self.CHA_MOD.setText(str(chaMod))
        self.PASSIVE_WISDOM.setText(str(10 + wisMod))


        self.updateSaveMod()
        self.updateSkillsMod()
        self.updateDeathSaves()


    def saveModsUpdated(self):
        if(self.loaded):
            self.character["attributes"]["saving throws"]["str"] = self.STR_ST_CHECK.isChecked()
            self.character["attributes"]["saving throws"]["dex"] = self.DEX_ST_CHECK.isChecked()
            self.character["attributes"]["saving throws"]["con"] = self.CON_ST_CHECK.isChecked()
            self.character["attributes"]["saving throws"]["int"] = self.INT_ST_CHECK.isChecked()
            self.character["attributes"]["saving throws"]["wis"] = self.WIS_ST_CHECK.isChecked()
            self.character["attributes"]["saving throws"]["cha"] = self.CHA_ST_CHECK.isChecked()

            self.updateSaveMod()

    def updateSaveMod(self):
        strMod = utilities.calculateModifier(self.character["attributes"]["stats"]["str"])
        dexMod = utilities.calculateModifier(self.character["attributes"]["stats"]["dex"])
        conMod = utilities.calculateModifier(self.character["attributes"]["stats"]["con"])
        intMod = utilities.calculateModifier(self.character["attributes"]["stats"]["int"])
        wisMod = utilities.calculateModifier(self.character["attributes"]["stats"]["wis"])
        chaMod = utilities.calculateModifier(self.character["attributes"]["stats"]["cha"])

        proBonus = utilities.calculateProficiencyBonus(self.character["attributes"]["lvl"])

        self.SPELLCASTING_SAVE_DC.setText(str(8 + wisMod + proBonus))
        self.SPELL_ATTACK_BONUS.setText(str(wisMod + proBonus))

        if(self.character["attributes"]["saving throws"]["str"]):
            self.STR_ST_CHECK.setChecked(True)
            self.STR_ST_MOD.setText(str(proBonus + strMod))
        else:
            self.STR_ST_MOD.setText(str(strMod))
        
        if(self.character["attributes"]["saving throws"]["dex"]):
            self.DEX_ST_CHECK.setChecked(True)
            self.DEX_ST_MOD.setText(str(proBonus + dexMod))
        else:
            self.DEX_ST_MOD.setText(str(dexMod))
        
        if(self.character["attributes"]["saving throws"]["con"]):
            self.CON_ST_CHECK.setChecked(True)
            self.CON_ST_MOD.setText(str(proBonus + conMod))
        else:
            self.CON_ST_MOD.setText(str(conMod))
        
        if(self.character["attributes"]["saving throws"]["int"]):
            self.INT_ST_CHECK.setChecked(True)
            self.INT_ST_MOD.setText(str(proBonus + intMod))
        else:
            self.INT_ST_MOD.setText(str(intMod))
        
        if(self.character["attributes"]["saving throws"]["wis"]):
            self.WIS_ST_CHECK.setChecked(True)
            self.WIS_ST_MOD.setText(str(proBonus + wisMod))
        else:
            self.WIS_ST_MOD.setText(str(wisMod))

        if(self.character["attributes"]["saving throws"]["cha"]):
            self.CHA_ST_CHECK.setChecked(True)
            self.CHA_ST_MOD.setText(str(proBonus + chaMod))
        else:
            self.CHA_ST_MOD.setText(str(chaMod))

    def skillsModsUpdated(self):
        if(self.loaded):
            self.character["attributes"]["skills"]["athletics"] = self.ATHLETICS_CHECK.isChecked()
            self.character["attributes"]["skills"]["acrobatics"] = self.ACROBATICS_CHECK.isChecked()
            self.character["attributes"]["skills"]["sleight of hand"] = self.SLEIGHT_OF_HAND_CHECK.isChecked()
            self.character["attributes"]["skills"]["stealth"] = self.STEALTH_CHECK.isChecked()
            self.character["attributes"]["skills"]["arcana"] = self.ARCANA_CHECK.isChecked()
            self.character["attributes"]["skills"]["history"] = self.HISTORY_CHECK.isChecked()
            self.character["attributes"]["skills"]["investigation"] = self.INVESTIGATION_CHECK.isChecked()
            self.character["attributes"]["skills"]["nature"] = self.NATURE_CHECK.isChecked()
            self.character["attributes"]["skills"]["religion"] = self.RELIGION_CHECK.isChecked()
            self.character["attributes"]["skills"]["animal handling"] = self.ANIMAL_HANDLING_CHECK.isChecked()
            self.character["attributes"]["skills"]["insight"] = self.INSIGHT_CHECK.isChecked()
            self.character["attributes"]["skills"]["medicine"] = self.MEDICINE_CHECK.isChecked()
            self.character["attributes"]["skills"]["perception"] = self.PERCEPTION_CHECK.isChecked()
            self.character["attributes"]["skills"]["survival"] = self.SURVIVAL_CHECK.isChecked()
            self.character["attributes"]["skills"]["deception"] = self.DECEPTION_CHECK.isChecked()
            self.character["attributes"]["skills"]["intimidation"] = self.INTIMIDATION_CHECK.isChecked()
            self.character["attributes"]["skills"]["performance"] = self.PERFORMANCE_CHECK.isChecked()
            self.character["attributes"]["skills"]["persuasion"] = self.PERSUASION_CHECK.isChecked()

            self.updateSkillsMod()

    def updateSkillsMod(self):
        strMod = utilities.calculateModifier(self.character["attributes"]["stats"]["str"])
        dexMod = utilities.calculateModifier(self.character["attributes"]["stats"]["dex"])
        conMod = utilities.calculateModifier(self.character["attributes"]["stats"]["con"])
        intMod = utilities.calculateModifier(self.character["attributes"]["stats"]["int"])
        wisMod = utilities.calculateModifier(self.character["attributes"]["stats"]["wis"])
        chaMod = utilities.calculateModifier(self.character["attributes"]["stats"]["cha"])

        proBonus = utilities.calculateProficiencyBonus(self.character["attributes"]["lvl"])
        
        if(self.character["attributes"]["skills"]["athletics"]):
            self.ATHLETICS_CHECK.setChecked(True)
            self.ATHLETICS_MOD.setText(str(proBonus + strMod))
        else:
            self.ATHLETICS_MOD.setText(str(strMod))
        
        if(self.character["attributes"]["skills"]["acrobatics"]):
            self.ACROBATICS_CHECK.setChecked(True)
            self.ACROBATICS_MOD.setText(str(proBonus + dexMod))
        else:
            self.ACROBATICS_MOD.setText(str(dexMod))

        if(self.character["attributes"]["skills"]["sleight of hand"]):
            self.SLEIGHT_OF_HAND_CHECK.setChecked(True)
            self.SLEIGHT_OF_HAND_MOD.setText(str(proBonus + dexMod))
        else:
            self.SLEIGHT_OF_HAND_MOD.setText(str(dexMod))

        if(self.character["attributes"]["skills"]["stealth"]):
            self.STEALTH_CHECK.setChecked(True)
            self.STEALTH_MOD.setText(str(proBonus + dexMod))
        else:
            self.STEALTH_MOD.setText(str(dexMod))

        if(self.character["attributes"]["skills"]["arcana"]):
            self.ARCANA_CHECK.setChecked(True)
            self.ARCANA_MOD.setText(str(proBonus + intMod))
        else:
            self.ARCANA_MOD.setText(str(intMod))

        if(self.character["attributes"]["skills"]["history"]):
            self.HISTORY_CHECK.setChecked(True)
            self.HISTORY_MOD.setText(str(proBonus + intMod))
        else:
            self.HISTORY_MOD.setText(str(intMod))

        if(self.character["attributes"]["skills"]["investigation"]):
            self.INVESTIGATION_CHECK.setChecked(True)
            self.INVESTIGATION_MOD.setText(str(proBonus + intMod))
        else:
            self.INVESTIGATION_MOD.setText(str(intMod))
        
        if(self.character["attributes"]["skills"]["nature"]):
            self.NATURE_CHECK.setChecked(True)
            self.NATURE_MOD.setText(str(proBonus + intMod))
        else:
            self.NATURE_MOD.setText(str(intMod))

        if(self.character["attributes"]["skills"]["religion"]):
            self.RELIGION_CHECK.setChecked(True)
            self.RELIGION_MOD.setText(str(proBonus + intMod))
        else:
            self.RELIGION_MOD.setText(str(intMod))

        if(self.character["attributes"]["skills"]["animal handling"]):
            self.ANIMAL_HANDLING_CHECK.setChecked(True)
            self.ANIMAL_HANDLING_MOD.setText(str(proBonus + wisMod))
        else:
            self.ANIMAL_HANDLING_MOD.setText(str(wisMod))

        if(self.character["attributes"]["skills"]["insight"]):
            self.INSIGHT_CHECK.setChecked(True)
            self.INSIGHT_MOD.setText(str(proBonus + wisMod))
        else:
            self.INSIGHT_MOD.setText(str(wisMod))

        if(self.character["attributes"]["skills"]["medicine"]):
            self.MEDICINE_CHECK.setChecked(True)
            self.MEDICINE_MOD.setText(str(proBonus + wisMod))
        else:
            self.MEDICINE_MOD.setText(str(wisMod))

        if(self.character["attributes"]["skills"]["perception"]):
            self.PERCEPTION_CHECK.setChecked(True)
            self.PERCEPTION_MOD.setText(str(proBonus + wisMod))
        else:
            self.PERCEPTION_MOD.setText(str(wisMod))

        if(self.character["attributes"]["skills"]["survival"]):
            self.SURVIVAL_CHECK.setChecked(True)
            self.SURVIVAL_MOD.setText(str(proBonus + wisMod))
        else:
            self.SURVIVAL_MOD.setText(str(wisMod))

        if(self.character["attributes"]["skills"]["deception"]):
            self.DECEPTION_CHECK.setChecked(True)
            self.DECEPTION_MOD.setText(str(proBonus + chaMod))
        else:
            self.DECEPTION_MOD.setText(str(chaMod))

        if(self.character["attributes"]["skills"]["intimidation"]):
            self.INTIMIDATION_CHECK.setChecked(True)
            self.INTIMIDATION_MOD.setText(str(proBonus + chaMod))
        else:
            self.INTIMIDATION_MOD.setText(str(chaMod))

        if(self.character["attributes"]["skills"]["performance"]):
            self.PERFORMANCE_CHECK.setChecked(True)
            self.PERFORMANCE_MOD.setText(str(proBonus + chaMod))
        else:
            self.PERFORMANCE_MOD.setText(str(chaMod))

        if(self.character["attributes"]["skills"]["persuasion"]):
            self.PERSUASION_CHECK.setChecked(True)
            self.PERSUASION_MOD.setText(str(proBonus + chaMod))
        else:
            self.PERSUASION_MOD.setText(str(chaMod))

    def deathSavesUpdated(self):
        if(self.loaded):
            checks = [self.FAILURES_DEATH_SAVE_3.isChecked(), 
                    self.FAILURES_DEATH_SAVE_2.isChecked(),
                    self.FAILURES_DEATH_SAVE_1.isChecked(),
                    self.SUCCESSES_DEATH_SAVE_1.isChecked(),
                    self.SUCCESSES_DEATH_SAVE_2.isChecked(),
                    self.SUCCESSES_DEATH_SAVE_3.isChecked()]

            print(checks)
            
            if(checks[2] and not checks[1] and not checks[0]):
                self.character["attributes"]["death saves"] = -1
            elif(checks[1] and not checks[0]):
                self.character["attributes"]["death saves"] = -2
            elif(checks[0]):
                self.character["attributes"]["death saves"] = -3
            elif(checks[5]):
                self.character["attributes"]["death saves"] = 3
            elif(checks[4] and not checks[5]):
                self.character["attributes"]["death saves"] = 2
            elif(checks[3] and not checks[4] and not checks[5]):
                self.character["attributes"]["death saves"] = 1
            else:
                self.character["attributes"]["death saves"] = 0
            self.updateDeathSaves()
    
    def updateDeathSaves(self):
        active = self.character["attributes"]["death saves"]
        checksSucc = [
                  self.SUCCESSES_DEATH_SAVE_1,
                  self.SUCCESSES_DEATH_SAVE_2,
                  self.SUCCESSES_DEATH_SAVE_3]
        checksFail = [
                  self.FAILURES_DEATH_SAVE_1, 
                  self.FAILURES_DEATH_SAVE_2,
                  self.FAILURES_DEATH_SAVE_3]

        if(active > 0):
            for i in range(0, abs(active)):
                checksSucc[i].setChecked(True)

            for i in range(0, len(checksFail)):
                checksFail[i].setChecked(False)
        elif(active < 0):
            for i in range(0, abs(active)):
                checksFail[i].setChecked(True)

            for i in range(0, len(checksSucc)):
                checksSucc[i].setChecked(False)
            
    def loadCharImage(self):
        path = str(QFileDialog.getOpenFileName(directory="./data/characters")[0])
        self.character["description"]["image"] = path
        self.CHARACTER_APPEARANCE.setPixmap(QtGui.QPixmap(path).scaledToWidth(self.CHARACTER_APPEARANCE.size().width()))
    
    def loadCharSymbol(self):
        path = str(QFileDialog.getOpenFileName(directory="./data/characters")[0])
        self.character["description"]["symbol"] = path
        self.SYMBOL.setPixmap(QtGui.QPixmap(path).scaledToWidth(self.SYMBOL.size().width()))

        

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.EDIT_EQUIPMENT.setText(_translate("Form", "Редактировать"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Form", "Характеристики"))
        self.EDIT_TREASURE.setText(_translate("Form", "Редактировать"))
        self.EDIT_APPEARANCE.setText(_translate("Form", "Внешность"))
        self.EDIT_SYMBOL.setText(_translate("Form", "Герб"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Form", "Описание персонажа"))
        self.ADD_CONTRIPS.setText(_translate("Form", "Заговоры"))
        self.ADD_SPELL_1.setText(_translate("Form", "Заклинания 1ур"))
        self.ADD_SPELL_2.setText(_translate("Form", "Заклинания 2ур"))
        self.ADD_SPELL_3.setText(_translate("Form", "Заклинания 3ур"))
        self.ADD_SPELL_4.setText(_translate("Form", "Заклинания 4ур"))
        self.ADD_SPELL_5.setText(_translate("Form", "Заклинания 5ур"))
        self.ADD_SPELL_6.setText(_translate("Form", "Заклинания 6ур"))
        self.ADD_SPELL_7.setText(_translate("Form", "Заклинания 7ур"))
        self.ADD_SPELL_8.setText(_translate("Form", "Заклинания 8ур"))
        self.ADD_SPELL_9.setText(_translate("Form", "Заклинания 9ур"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Form", "Заклинания и умения"))
